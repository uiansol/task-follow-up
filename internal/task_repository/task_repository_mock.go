// Code generated by mockery v2.40.1. DO NOT EDIT.

package taskrepository

import (
	mock "github.com/stretchr/testify/mock"
	entities "github.com/uiansol/task-follow-up/internal/domain/entities"
)

// ITaskRepositoryMock is an autogenerated mock type for the ITaskRepositoryMock type
type ITaskRepositoryMock struct {
	mock.Mock
}

// Save provides a mock function with given fields: task
func (_m *ITaskRepositoryMock) Save(task entities.Task) (string, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Task) (string, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(entities.Task) string); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITaskRepository creates a new instance of ITaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskRepositoryMock {
	mock := &ITaskRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
